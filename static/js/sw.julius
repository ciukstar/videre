
self.onpush = function (e) {
  
  const message = e.data.json();

  const promise = self.clients.matchAll({ type: 'window', includeUncontrolled: true }).then((cs) => {

    const focused = cs.filter((client) => client.focused);
    
    focused.forEach((client) => { client.postMessage(message); });
    
    return [focused.length < 1, message];
    
  }).then(([notify, message]) => {

    let actions;
    if (message.messageType === #{show PushMsgTypeAudioCall} || message.messageType === #{show PushMsgTypeVideoCall}) {
      actions = [ { action: 'decline', title: #{msgr MsgDecline} },
		  { action: 'accept', title: #{msgr MsgAnswer} }
		];
    } else if (message.messageType === #{show PushMsgTypeMessage}) {
      actions = [ { action: 'ignore', title: #{msgr MsgIgnore} },
		  { action: 'reply', title: #{msgr MsgReply} }
		];
    } else {
      actions = [];
    }
    
    return !notify
      ? Promise.resolve()
      : self.registration.showNotification(message.title, {
	requireInteraction: true,
        tag: message.messageType,
        renotify: true,
        icon: message.icon,
        body: message.body,
        image: message.image,
	data: message,
	actions: actions
      });
    
  });
  
  e.waitUntil(promise);
  
};


self.addEventListener('notificationclick', (e) => {

  e.notification.close();

  if (e.action === 'decline') {
    
    fetch('@{VideoR PushMessageR}', {
      method: 'POST',
      headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
	messageType: #{show PushMsgTypeDecline},
	title: #{msgr MsgAppName},
	icon: '@{StaticR img_phone_missed_FILL0_wght400_GRAD0_opsz24_svg}',
	body: #{msgr MsgCallDeclined},
	channelId: e.notification.data.channelId,
	senderId: e.notification.data.recipientId,
	recipientId: e.notification.data.senderId,
	videor: e.notification.data.videor,
	audior: e.notification.data.audior,
	videos: e.notification.data.videos,
	audios: e.notification.data.audios,
	callId: e.notification.data.audios
      })
    });
    
  } else {
  
    const promise = self.clients.matchAll(
      { type: 'window', includeUncontrolled: true }
    ).then((clients) => {

      return clients.length > 0
	? clients[0].focus().then(
	  (client) => { client.postMessage(e.notification.data); }
	)
	: self.clients.openWindow(self.location.origin).then(
	  (client) => { client.postMessage(e.notification.data); }
	);
      
    });

    e.waitUntil(promise);
    
  }
  
});


self.addEventListener('notificationclose', (e) => {
  fetch('@{VideoR PushMessageR}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{show PushMsgTypeIgnore},
      title: #{msgr MsgAppName},
      icon: '@{StaticR img_phone_missed_FILL0_wght400_GRAD0_opsz24_svg}',
      body: #{msgr MsgCallDeclined},
      channelId: e.notification.data.channelId,
      senderId: e.notification.data.recipientId,
      recipientId: e.notification.data.senderId,
      videor: e.notification.data.videor,
      audior: e.notification.data.audior,
      videos: e.notification.data.videos,
      audios: e.notification.data.audios,
      callId: e.notification.data.audios
    })
  });
});


self.addEventListener('fetch', function (e) {
  
  if (e.request.method === 'GET' && (e.request.url.includes('my/contacts/') || e.request.url.includes('callees/'))) {

    e.respondWith(
      self.registration.pushManager.getSubscription().then(function (subscription) {
	
	if (!subscription) {
	  return fetch(e.request);
	} else {	  
	  let url = new URL(e.request.url);
	  url.searchParams.set('endpoint', subscription.endpoint);	  
	  return fetch(url);
	}
	
      })
    );

  }

});

self.addEventListener('pushsubscriptionchange', (event) => {
  
  Notification.requestPermission().then(function (permission) {
    
    if (permission === 'granted') {
      
      registration.pushManager.subscribe({
	userVisibleOnly: true,
	applicationServerKey: new Uint8Array(#{toJSON applicationServerKey})
      }).then((subscription) => {
	
	const newSubscr = JSON.parse(JSON.stringify(event.newSubscription));
	const oldSubscr = JSON.parse(JSON.stringify(event.oldSubscription));
	
	fetch('@{PushSubscriptionEndpointR}', {
	  method: 'PUT',
	  headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
	  body: new URLSearchParams({
	    endpoint: newSubscr.endpoint,
	    p256dh: newSubscr.keys.p256dh,
	    auth: newSubscr.keys.auth,
	    oldendpoint: oldSubscr.endpoint
	  })
	}).then((response) => {
	  localStorage.setItem(#{keyWebPushSubscriptionEndpoint}, newSubscr.endpoint);
	});
	
      }).catch((err) => {
	
	registration.pushManager.getSubscription().then((subscription) => {
	  subscription.unsubscribe().then((sccess) => {
	    registration.pushManager.subscribe({
	      userVisibleOnly: true,
	      applicationServerKey: new Uint8Array(#{toJSON applicationServerKey})
	    }).then((subscription) => {
	
	      const newSubscr = JSON.parse(JSON.stringify(event.newSubscription));
	      const oldSubscr = JSON.parse(JSON.stringify(event.oldSubscription));
	      
	      fetch('@{PushSubscriptionEndpointR}', {
		method: 'PUT',
		headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
		body: new URLSearchParams({
		  endpoint: newSubscr.endpoint,
		  p256dh: newSubscr.keys.p256dh,
		  auth: newSubscr.keys.auth,
		  oldendpoint: oldSubscr.endpoint
		})
	      }).then((response) => {
		localStorage.setItem(#{keyWebPushSubscriptionEndpoint}, newSubscr.endpoint);
	      });
	      
	    });
	  });
	});
	
      });
      
    }
    
  });
  
});
