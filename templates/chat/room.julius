
Array.from(
  document.body.querySelectorAll('time.day-bubble[datetime]')
).forEach(function (x) {
  x.textContent = new Date(x.getAttribute('datetime')).toLocaleDateString(
    navigator.language, { weekday: 'short',year: 'numeric',month: 'long',day: 'numeric' }
  );
});

Array.from(
  document.body.querySelectorAll('time.time-bubble[datetime]')
).forEach(function (x) {
  x.textContent = new Date(x.getAttribute('datetime')).toLocaleTimeString(
    navigator.language, { hour: "numeric",minute: "numeric" }
  );
});

const output = document.getElementById(#{idChatOutput});
const form = document.getElementById(#{idMessageForm});
const input = document.getElementById(#{idMessageInput});
const conn = new WebSocket('@{toParent $ ChatChannelR sid cid rid}'.replace("http:", "ws:").replace("https:", "wss:"));

output.scrollTop = output.scrollHeight;

input.addEventListener('input',function (e) {
  document.getElementById(#{idButtonSend}).disabled = !(this.value && this.value.trim());
});


conn.onmessage = function (e) {
  const data = JSON.parse(e.data);
  const bubble = document.createElement('p');
  const bubbleStatusLine = document.createElement('span');
  const time = document.createElement('time');
  const icon = document.createElement('i');
  const bubbleTailOut = document.createElement('span');
  const bubbleTail = document.createElement('span');
  
  bubble.classList.add("bubble","body-medium");
  bubble.classList.add(... data.user == #{pack $ show $ fromSqlKey sid} ? ["user","right"] : ["interlocutor","left"]);
  bubbleStatusLine.classList.add("bubble-status-line");
  time.setAttribute("datetime",data.created);
  time.classList.add("body-small");
  icon.style.fontFamily = "Material Symbols Outlined";
  bubbleTailOut.classList.add("bubble-tail-out");
  bubbleTail.classList.add("bubble-tail");
  
  bubble.appendChild(document.createTextNode(data.message));
  time.appendChild(document.createTextNode(new Date(data.created).toLocaleTimeString(
    navigator.language, {hour: 'numeric',minute: 'numeric'}
  )));

  bubbleTailOut.appendChild(bubbleTail);
  icon.appendChild(document.createTextNode("done_all"));
  bubbleStatusLine.appendChild(time);
  bubbleStatusLine.appendChild(icon);
  bubble.appendChild(bubbleStatusLine);
  bubble.appendChild(bubbleTailOut);
  output.appendChild(bubble);
  output.scrollTop = output.scrollHeight;

  if (data.user === #{rawJS $ pack $ show $ fromSqlKey rid}) {
    fetch(`@{toParent AcknowledgeR}`, {
      method: 'POST',
      headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({"cid": data.cid})
    });
  }
  
};

conn.onerror = function (e) {
  location.reload();
}; 

form.addEventListener("submit", function(e) {
  conn.send( input.value );
  input.value = "";
  var btnSubmit = this.querySelector('md-filled-icon-button');
  btnSubmit.disabled = true;
  input.focus();
  e.preventDefault();
});

document.getElementById(#{idButtonVideoCall}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{show PushMsgTypeVideoCall},
      icon: '@{icon}',
      title: #{msgr MsgAppName},
      body: #{msgr $ MsgIncomingVideoCallFrom callerName},
      videor: true,
      audior: true,
      videos: true,
      audios: true
    })
  }).then(function (result) {
    document.getElementById(#{idDialogOutgoingCall}).show();
  }).catch(function (err) {
    console.error(err);
  });

});

document.getElementById(#{idButtonAudioCall}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{show PushMsgTypeAudioCall},
      icon: '@{icon}',
      title: #{msgr MsgAppName},
      body: #{msgr $ MsgIncomingAudioCallFrom callerName},
      videor: false,
      audior: true,
      videos: false,
      audios: true
    })
  }).then(function (result) {
    document.getElementById(#{idDialogOutgoingCall}).show();
  }).catch(function (err) {
    console.error(err);
  });

});

document.getElementById(#{idButtonOutgoingCallCancel}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{show PushMsgTypeCancel},
      title: #{msgr MsgAppName},
      icon: '@{iconCallEnd}',
      body: #{msgr $ MsgCallCanceledByCaller callerName},
      videor: false,
      audior: false,
      videos: false,
      audios: false
    })
  }).then(function (result) {
    document.getElementById(#{idDialogOutgoingCall}).close();
  }).catch(function (err) {
    console.error(err);
  });

});


navigator.serviceWorker.addEventListener('message', function (message) {
  
  if (message.data.messageType === #{show PushMsgTypeAccept}) {
    
    document.getElementById(#{idDialogOutgoingCall}).close();
    
    const params = new URLSearchParams({
      backlink: '@{backlink}',
      videor: message.data.videor,
      audior: message.data.audior,
      videos: message.data.videos,
      audios: message.data.audios
    });

    window.location.href = `@{outgoing}?${params}`;
    
  } else if (message.data.messageType === #{show PushMsgTypeDecline}) {

    document.getElementById(#{idDialogOutgoingCall}).close();
    document.getElementById(#{idDialogCallDeclined}).show();
    
  } else if (message.data.messageType === #{show PushMsgTypeRefresh}) {
    
    window.location.reload();
    
  }
  
});
