
document.body.querySelectorAll('time.day-bubble[datetime]').forEach(function (x) {
  x.textContent = new Date(x.getAttribute('datetime')).toLocaleDateString(
    navigator.language, { weekday: 'short',year: 'numeric',month: 'long',day: 'numeric' }
  );
});

document.body.querySelectorAll('time.time-bubble[datetime]').forEach(function (x) {
  x.textContent = new Date(x.getAttribute('datetime')).toLocaleTimeString(
    navigator.language, { hour: "numeric",minute: "numeric" }
  );
});

const main = document.querySelector('main');
const chatOutput = document.getElementById(#{idChatOutput});
const form = document.getElementById(#{idMessageForm});
const input = document.getElementById(#{idMessageInput});
const conn = new WebSocket('@{rtp $ ChatChannelR sid cid rid}'.replace("http:", "ws:").replace("https:", "wss:"));

const ackObsever = new IntersectionObserver(
  function (entries, obsever) {
    
    entries.forEach(x => {
      fetch(x.target.dataset.read, { method: 'POST' }).then(() => {
        x.target.removeAttribute('notread');
      });
    });
    
  },
  { root: chatOutput,
    threshold: 0.8
  }
);

chatOutput.querySelectorAll('.bubble.incoming[notread]').forEach(x => {
  ackObsever.observe(x);
});

main.scroll(0, main.scrollHeight);


conn.onmessage = function (e) {
  
  const data = JSON.parse(e.data);

  const isOutgoing = data.author === #{sid};
  const isIncoming = data.recipient === #{sid};
  
  if (data.type === #{ChatMessageTypeDelivered} && isOutgoing) {
    
    const bubble = document.getElementById(`idChat${data.chatId}`);
    const bubbleDeleted = !bubble;
    if (!bubbleDeleted) {
      const icon = bubble.querySelector('i.bubble-status');
      icon.classList.add('tiny','tiny-margin');
      icon.textContent = 'done_all';
    }
    
  } else if (data.type === #{ChatMessageTypeRead} && isOutgoing) {

    const bubble = document.getElementById(`idChat${data.chatId}`);
    const bubbleDeleted = !bubble;
    if (!bubbleDeleted) {
      const icon = bubble.querySelector('i.bubble-status');
      icon.classList.add('tiny','tiny-margin','green-text');
      icon.textContent = 'done_all';
    }
    
  } else if (data.type === #{ChatMessageTypeRemove}) {

    const bubble = document.getElementById(`idChat${data.chatId}`);
    const bubbleDeleted = !bubble;
    
    if (!bubbleDeleted && bubble.classList.contains('incoming') && bubble.hasAttribute('removed')) {
      
      bubble.remove();
      
    } else if (!bubbleDeleted && bubble.classList.contains('incoming')) {
      
      bubble.setAttribute('removed','');
      
      bubble.querySelector('span.bubble-content').replaceWith((() => {
        const span = document.createElement('span');
        span.classList.add('bubble-content','small-text','secondary-text');
        span.textContent = #{msgr MsgRemoved};
        return span;
      }) ());
      
    } else if (!bubbleDeleted && bubble.classList.contains('outgoing')) {
      
      bubble.classList.add('secondary-text','small-text');
      const statusLine = bubble.querySelector('.bubble-status-line');
      
      if (!statusLine.querySelector('.removed')) {
        statusLine.querySelector('.bubble-status').after((() => {
          const icon = document.createElement('i');
          icon.classList.add('removed','tiny','tiny-margin');
          bubble.setAttribute('title',#{msgr MsgRemovedByRecipient});
          icon.textContent = 'delete_sweep';   
          return icon;
        }) ());
      }
      
    }
    
  } else if (data.type === #{ChatMessageTypeDelete}) {

    const bubble = document.getElementById(`idChat${data.chatId}`);
    const bubbleDeleted = !bubble;
    if (! bubbleDeleted) {
      bubble.remove();
    }

  } else if (data.type === #{ChatMessageTypeChat}) {
    
    const bubble = chatOutput.appendChild((() => {
      
      const bubble = document.createElement('div');
      bubble.id = `idChat${data.chatId}`;
      bubble.classList.add('bubble');
      bubble.classList.add(data.author == #{pack $ show $ fromSqlKey sid} ? 'outgoing' : 'incoming');
      bubble.setAttribute('data-read',data.links.read);

      const content = bubble.appendChild((() => {
        const content = document.createElement('span');
        content.classList.add('bubble-content');
        content.appendChild(document.createTextNode(data.message));
        return content;
      }) ());

      const statusLine = bubble.appendChild((() => {
        
        const statusLine = document.createElement('div');
        statusLine.classList.add('bubble-status-line','secondary-text');

        statusLine.appendChild((() => {
          const time = document.createElement('time');
          time.setAttribute('datetime', data.created);
          time.classList.add('time-bubble','small-text');
          time.appendChild(document.createTextNode(new Date(data.created).toLocaleTimeString(
            navigator.language, { hour: 'numeric', minute: 'numeric' }
          )));
          return time;
        }) ());

        if (isOutgoing) {
          statusLine.appendChild((() => {
            const icon = document.createElement('i');
            icon.classList.add('bubble-status','tiny','tiny-margin');
            icon.textContent = 'check';   
            return icon;
          }) ());
        }

        statusLine.appendChild((() => {
          const anchor = document.createElement('button');
          anchor.classList.add('menu-anchor','small','transparent','square','no-margin');
          
          anchor.appendChild((() => {
            const icon = document.createElement('i');
            icon.classList.add('tiny');
            icon.appendChild(document.createTextNode('more_vert'));
            return icon;            
          }) ());

          const menu = anchor.appendChild((() => {
            
            const menu = document.createElement('menu');
            menu.id = `ctxMenu${chatOutput.querySelectorAll('.bubble').length + 1}`;
            menu.classList.add('left','top','no-wrap');
            
            const itemCopy = menu.appendChild((() => {
              
              const itemCopy = document.createElement('li');
              itemCopy.classList.add('action-copy','wave');
              itemCopy.setAttribute('data-ui',`#${menu.id}`);
              
              itemCopy.appendChild((() => {
                const i = document.createElement('i');
                i.textContent = 'content_copy';                
                return i;
              }) ());
              
              itemCopy.appendChild((() => {
                const span = document.createElement('span');
                span.textContent = #{msgr MsgCopy};
                return span;
              }) ());

              itemCopy.onclick = function (e) {
                
                navigator.clipboard.writeText(
                  bubble.querySelector('.bubble-content').textContent
                ).then(() => {
                  
                  const snackbar = document.createElement('div');
                  snackbar.classList.add('snackbar','active');
                  
                  snackbar.appendChild((() => {
                    const content = document.createElement('div');
                    content.classList.add('max');
                    content.textContent = #{msgr MsgContentCopied};
                    return content;
                  }) ());
                  
                  snackbar.appendChild((() => {
                    const close = document.createElement('button');
                    close.classList.add('close','transparent','circle','small');
                    close.addEventListener('click', e => {
                      snackbar.remove();
                    });
                    close.appendChild((() => {
                      const icon = document.createElement('i');
                      icon.textContent = 'close';
                      return icon; 
                    }) ());         
                    return close;
                  }) ());
                  
                  document.body.appendChild(snackbar);

                  setTimeout(() => { snackbar.remove(); }, 2000);
                  
                });
              };
              
              return itemCopy;
            }) ());
            
            const itemDelete = menu.appendChild((() => {
              
              const itemDelete = document.createElement('li');
              itemDelete.classList.add('action-delete','wave');
              itemDelete.setAttribute('data-ui',`#${menu.id}`);
              
              itemDelete.appendChild((() => {
                const i = document.createElement('i');
                i.textContent = 'delete';
                return i;
              }) ());
              
              itemDelete.appendChild((() => {
                const span = document.createElement('span');
                span.textContent = #{msgr MsgDele};
                return span;
              }) ());

              itemDelete.onclick = function (e) {

                const xref = data.author == #{pack $ show $ fromSqlKey sid} ? data.links['delete'] : data.links['remove'];
                
                fetch(xref, {
                  method: 'DELETE',
                  headers: { 'Accept': 'application/json' }
                }).then(res => {
                  
                  res.json().then(function (data) {
                    
                    const snackbar = document.createElement('div');
                    snackbar.classList.add('snackbar','active');
                    
                    snackbar.appendChild((() => {
                      const content = document.createElement('div');
                      content.classList.add('max');
                      content.textContent = data.type === #{show ChatMessageTypeRemove}
                        ? #{msgr MsgMessageRemoved} : #{msgr MsgMessageDeleted};
                      return content;
                    }) ());
                    
                    snackbar.appendChild((() => {
                      const close = document.createElement('button');
                      close.classList.add('close','transparent','circle','small');
                      close.addEventListener('click', e => {
                        snackbar.remove();
                      });
                      close.appendChild((() => {
                        const icon = document.createElement('i');
                        icon.textContent = 'close';
                        return icon; 
                      }) ());         
                      return close;
                    }) ());
                    
                    document.body.appendChild(snackbar);
                    setTimeout(() => { snackbar.remove(); }, 6000);
                  });
                  
                }).catch(err => {
                  
                  const snackbar = document.createElement('div');
                  snackbar.classList.add('snackbar','error','active');
                  
                  snackbar.appendChild((() => {
                    const content = document.createElement('div');
                    content.classList.add('max');
                    content.textContent = err.message;
                    return content;
                  }) ());
                  
                  snackbar.appendChild((() => {
                    const close = document.createElement('button');
                    close.classList.add('close','transparent','circle','small');
                    close.addEventListener('click', e => {
                      snackbar.remove();
                    });
                    close.appendChild((() => {
                      const icon = document.createElement('i');
                      icon.textContent = 'close';
                      return icon; 
                    }) ());         
                    return close;
                  }) ());
                  
                  document.body.appendChild(snackbar);
                  setTimeout(() => { snackbar.remove(); }, 6000); 
                }).finally(() => {
                  menu.classList.remove('active');
                });
              };
              
              return itemDelete;
            }) ());
            
            return menu;
          }) ());

          anchor.setAttribute('data-ui',`#${menu.id}`);
                  
          anchor.onclick = function (e) {
            const v = anchor.getBoundingClientRect().top > (window.innerHeight / 2) ? 'top' : 'bottom';
            const h = anchor.getBoundingClientRect().left > (window.innerWidth / 2) ? 'left' : 'right';
            menu.classList.remove('top','bottom','left','right');
            menu.classList.add(v,h);
          };
          
          return anchor;
        }) ());
        
        return statusLine;
      }) ());

      const bubbleTailOut = bubble.appendChild((() => {
        const bubbleTailOut = document.createElement('span');
        bubbleTailOut.classList.add('bubble-tail-out');
        bubbleTailOut.appendChild((() => {
          const bubbleTail = document.createElement('span');
          bubbleTail.classList.add('bubble-tail');
          return bubbleTail;
        }) ());
        
        return bubbleTailOut;
      }) ());
      
      return bubble;
    }) ());

    if (isIncoming) {
      fetch(data.links.delivered, { method: 'POST' });
      ackObsever.observe(bubble);
      setTimeout(() => {
        document.getElementById(#{idAudioIncomingChat}).play().catch(_ => {});
      }, 0);
    }
    
    if (!document.hidden) {
      main.scroll(0, main.scrollHeight);
    }

  }
  
};

conn.onerror = function (e) {
  location.reload();
}; 


form.addEventListener('submit', function(e) {
  e.preventDefault();
  
  conn.send( input.value );
  input.value = '';
  const btnSubmit = document.getElementById(#{idButtonSend});
  btnSubmit.disabled = true;
  input.focus();
  
  setTimeout(() => {
    document.getElementById(#{idAudioOutgoingChat}).play().catch(_ => {});
  }, 0);
  
});


input.addEventListener('input',function (e) {
  document.getElementById(#{idButtonSend}).disabled = !(this.value && this.value.trim());
});


document.getElementById(#{idButtonVideoCall}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{PushMsgTypeVideoCall},
      icon: '@{icon}',
      title: #{msgr MsgAppName},
      body: #{msgr $ MsgIncomingVideoCallFrom callerName},
      videor: true,
      audior: true,
      videos: true,
      audios: true
    })
  }).then(function (result) {
    document.getElementById(#{idOverlayDialogOutgoingCall}).classList.add('active');
    document.getElementById(#{idDialogOutgoingCall}).show();
    document.getElementById(#{idAudioOutgoingCallRingtone}).play();
  }).catch(function (err) {
    console.error(err);
  });

});

document.getElementById(#{idButtonAudioCall}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{PushMsgTypeAudioCall},
      icon: '@{icon}',
      title: #{msgr MsgAppName},
      body: #{msgr $ MsgIncomingAudioCallFrom callerName},
      videor: false,
      audior: true,
      videos: false,
      audios: true
    })
  }).then(function (result) {
    document.getElementById(#{idOverlayDialogOutgoingCall}).classList.add('active');
    document.getElementById(#{idDialogOutgoingCall}).show();
    document.getElementById(#{idAudioOutgoingCallRingtone}).play();
  }).catch(function (err) {
    console.error(err);
  });

});

document.getElementById(#{idButtonOutgoingCallCancel}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{PushMsgTypeCancel},
      title: #{msgr MsgAppName},
      icon: '@{iconCallEnd}',
      body: #{msgr $ MsgCallCanceledByCaller callerName},
      videor: false,
      audior: false,
      videos: false,
      audios: false
    })
  }).then(function (result) {
    document.getElementById(#{idAudioOutgoingCallRingtone}).pause();
    document.getElementById(#{idDialogOutgoingCall}).close();
    document.getElementById(#{idOverlayDialogOutgoingCall}).classList.remove('active');
  }).catch(function (err) {
    console.error(err);
  });

});


navigator.serviceWorker.addEventListener('message', function (message) {
  
  if (message.data.messageType === #{PushMsgTypeAccept}) {
    
    document.getElementById(#{idAudioOutgoingCallRingtone}).pause();
    document.getElementById(#{idDialogOutgoingCall}).close();
    document.getElementById(#{idOverlayDialogOutgoingCall}).classList.remove('active');
    
    const params = new URLSearchParams({
      backlink: '@{backlink}',
      videor: message.data.videor,
      audior: message.data.audior,
      videos: message.data.videos,
      audios: message.data.audios
    });

    window.location.href = `@{outgoing}?${params}`;
    
  } else if (message.data.messageType === #{PushMsgTypeDecline}) {

    document.getElementById(#{idAudioOutgoingCallRingtone}).pause();
    document.getElementById(#{idDialogOutgoingCall}).close();
    document.getElementById(#{idOverlayDialogOutgoingCall}).classList.remove('active');
    
    document.getElementById(#{idOverlayDialogCallDeclined}).classList.add('active');
    document.getElementById(#{idDialogCallDeclined}).show();
    
  } else if (message.data.messageType === #{PushMsgTypeRefresh}) {
    
    window.location.reload();
    
  }
  
});


chatOutput.querySelectorAll('.bubble').forEach(bubble => {

  const anchor = bubble.querySelector('button.menu-anchor');
  const menu = anchor.querySelector('menu');
  
  anchor.onclick = function (e) {
    const v = anchor.getBoundingClientRect().top > (window.innerHeight / 2) ? 'top' : 'bottom';
    const h = anchor.getBoundingClientRect().left > (window.innerWidth / 2) ? 'left' : 'right';
    menu.classList.remove('top','bottom','left','right');
    menu.classList.add(v,h);
  };

  menu.querySelector('li.action-delete').onclick = function (e) {
    fetch(e.target.dataset.href, {
      method: 'DELETE',
      headers: { 'Accept': 'application/json' }
    }).then(res => {
      
      res.json().then(function (data) {
        
        const snackbar = document.createElement('div');
        snackbar.classList.add('snackbar','active');
        
        snackbar.appendChild((() => {
          const content = document.createElement('div');
          content.classList.add('max');
          content.textContent = data.type === #{show ChatMessageTypeRemove}
            ? #{msgr MsgMessageRemoved} : #{msgr MsgMessageDeleted};
          return content;
        }) ());
        
        snackbar.appendChild((() => {
          const close = document.createElement('button');
          close.classList.add('close','transparent','circle','small');
          close.addEventListener('click', e => {
            snackbar.remove();
          });
          close.appendChild((() => {
            const icon = document.createElement('i');
            icon.textContent = 'close';
            return icon; 
          }) ());         
          return close;
        }) ());
        
        document.body.appendChild(snackbar);
        setTimeout(() => { snackbar.remove(); }, 6000);
      });
      
    }).catch(err => {
      
      const snackbar = document.createElement('div');
      snackbar.classList.add('snackbar','error','active');
      
      snackbar.appendChild((() => {
        const content = document.createElement('div');
        content.classList.add('max');
        content.textContent = err.message;
        return content;
      }) ());
      
      snackbar.appendChild((() => {
        const close = document.createElement('button');
        close.classList.add('close','transparent','circle','small');
        close.addEventListener('click', e => {
          snackbar.remove();
        });
        close.appendChild((() => {
          const icon = document.createElement('i');
          icon.textContent = 'close';
          return icon; 
        }) ());         
        return close;
      }) ());
      
      document.body.appendChild(snackbar);
      setTimeout(() => { snackbar.remove(); }, 6000); 
    }).finally(() => {
      menu.classList.remove('active');
    });
  };

  menu.querySelector('li.action-copy').onclick = function (e) {
    
    navigator.clipboard.writeText(
      bubble.querySelector('.bubble-content').textContent
    ).then(() => {
      
      const snackbar = document.createElement('div');
      snackbar.classList.add('snackbar','active');
      
      snackbar.appendChild((() => {
        const content = document.createElement('div');
        content.classList.add('max');
        content.textContent = #{msgr MsgContentCopied};
        return content;
      }) ());
      
      snackbar.appendChild((() => {
        const close = document.createElement('button');
        close.classList.add('close','transparent','circle','small');
        close.addEventListener('click', e => {
          snackbar.remove();
        });
        close.appendChild((() => {
          const icon = document.createElement('i');
          icon.textContent = 'close';
          return icon; 
        }) ());         
        return close;
      }) ());
      
      document.body.appendChild(snackbar);

      setTimeout(() => { snackbar.remove(); }, 2000);
      
    });
  };

});


Array.from(
  document.querySelectorAll('.snackbar')
).map(
  x => [x,Array.from(x.querySelectorAll('button.close'))]
).forEach(([snackbar,buttons]) => {
  buttons.forEach(x => x.addEventListener('click', e => { snackbar.classList.remove('active'); }));
});

setTimeout(() => {
  document.querySelectorAll('.snackbar').forEach(x => { x.classList.remove('active'); });
}, 6000);
