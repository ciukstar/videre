
Array.from(
  document.body.querySelectorAll('time.day-bubble[datetime]')
).forEach(function (x) {
  x.textContent = new Date(x.getAttribute('datetime')).toLocaleDateString(
    navigator.language, { weekday: 'short',year: 'numeric',month: 'long',day: 'numeric' }
  );
});

Array.from(
  document.body.querySelectorAll('time.time-bubble[datetime]')
).forEach(function (x) {
  x.textContent = new Date(x.getAttribute('datetime')).toLocaleTimeString(
    navigator.language, { hour: "numeric",minute: "numeric" }
  );
});

const output = document.getElementById(#{idChatOutput});
const form = document.getElementById(#{idMessageForm});
const input = document.getElementById(#{idMessageInput});
const conn = new WebSocket('@{toParent $ ChatChannelR sid cid rid}'.replace("http:", "ws:").replace("https:", "wss:"));

window.scrollTo(0, document.body.scrollHeight);

input.addEventListener('input',function (e) {
  document.getElementById(#{idButtonSend}).disabled = !(this.value && this.value.trim());
});


conn.onmessage = function (e) {
  
  const data = JSON.parse(e.data);
  
  output.appendChild((() => {
    const bubble = document.createElement('p');
    bubble.classList.add('bubble');
    bubble.classList.add(... data.user == #{pack $ show $ fromSqlKey sid} ? ['user','atright'] : ['interlocutor','atleft']);

    bubble.appendChild(document.createTextNode(data.message));

    bubble.appendChild((() => {
      const bubbleStatusLine = document.createElement('span');
      bubbleStatusLine.classList.add('bubble-status-line');

      bubbleStatusLine.appendChild((() => {
        const time = document.createElement('time');
        time.setAttribute('datetime', data.created);
        time.classList.add('small-text');
        time.appendChild(document.createTextNode(new Date(data.created).toLocaleTimeString(
          navigator.language, { hour: 'numeric', minute: 'numeric' }
        )));
        return time;
      }) ());

      bubbleStatusLine.appendChild((() => {
        const icon = document.createElement('i');
        icon.classList.add('tiny','tiny-margin');
        icon.appendChild(document.createTextNode('done_all'));
        return icon;
      }) ());
      
      return bubbleStatusLine;
    }) ());

    bubble.appendChild((() => {
      const bubbleTailOut = document.createElement('span');
      bubbleTailOut.classList.add('bubble-tail-out');
      bubbleTailOut.appendChild((() => {
        const bubbleTail = document.createElement('span');
        bubbleTail.classList.add('bubble-tail');
        return bubbleTail;
      }) ());
      
      return bubbleTailOut;
    }) ());
    
    return bubble;
  }) ());
  
  window.scrollTo(0, document.body.scrollHeight);

  if (data.user === #{rawJS $ pack $ show $ fromSqlKey rid}) {
    
    fetch(`@{toParent AcknowledgeR}`, {
      method: 'POST',
      headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({"cid": data.cid})
    });
    
    setTimeout(() => { document.getElementById(#{idAudioIncomingChat}).play(); }, 0);
    
  }
  
};

conn.onerror = function (e) {
  location.reload();
}; 

form.addEventListener("submit", function(e) {
  conn.send( input.value );
  input.value = "";
  const btnSubmit = document.getElementById(#{idButtonSend});
  btnSubmit.disabled = true;
  input.focus();
  e.preventDefault();
  setTimeout(() => document.getElementById(#{idAudioOutgoingChat}).play(), 0);
});

document.getElementById(#{idButtonVideoCall}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{PushMsgTypeVideoCall},
      icon: '@{icon}',
      title: #{msgr MsgAppName},
      body: #{msgr $ MsgIncomingVideoCallFrom callerName},
      videor: true,
      audior: true,
      videos: true,
      audios: true
    })
  }).then(function (result) {
    document.getElementById(#{idDialogOutgoingCall}).show();
  }).catch(function (err) {
    console.error(err);
  });

});

document.getElementById(#{idButtonAudioCall}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{PushMsgTypeAudioCall},
      icon: '@{icon}',
      title: #{msgr MsgAppName},
      body: #{msgr $ MsgIncomingAudioCallFrom callerName},
      videor: false,
      audior: true,
      videos: false,
      audios: true
    })
  }).then(function (result) {
    document.getElementById(#{idDialogOutgoingCall}).show();
  }).catch(function (err) {
    console.error(err);
  });

});

document.getElementById(#{idButtonOutgoingCallCancel}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{PushMsgTypeCancel},
      title: #{msgr MsgAppName},
      icon: '@{iconCallEnd}',
      body: #{msgr $ MsgCallCanceledByCaller callerName},
      videor: false,
      audior: false,
      videos: false,
      audios: false
    })
  }).then(function (result) {
    document.getElementById(#{idDialogOutgoingCall}).close();
  }).catch(function (err) {
    console.error(err);
  });

});


navigator.serviceWorker.addEventListener('message', function (message) {
  
  if (message.data.messageType === #{PushMsgTypeAccept}) {
    
    document.getElementById(#{idDialogOutgoingCall}).close();
    
    const params = new URLSearchParams({
      backlink: '@{backlink}',
      videor: message.data.videor,
      audior: message.data.audior,
      videos: message.data.videos,
      audios: message.data.audios
    });

    window.location.href = `@{outgoing}?${params}`;
    
  } else if (message.data.messageType === #{PushMsgTypeDecline}) {

    document.getElementById(#{idDialogOutgoingCall}).close();
    document.getElementById(#{idDialogCallDeclined}).show();
    
  } else if (message.data.messageType === #{PushMsgTypeRefresh}) {
    
    window.location.reload();
    
  }
  
});

document.getElementById(#{idDialogOutgoingCall}).addEventListener('opened', (e) => {
  document.getElementById(#{idAudioOutgoingCallRingtone}).play();
});

document.getElementById(#{idDialogOutgoingCall}).addEventListener('closed', (e) => {
  document.getElementById(#{idAudioOutgoingCallRingtone}).pause();
});
