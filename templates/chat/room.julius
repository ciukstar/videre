
document.body.querySelectorAll('time.day-bubble[datetime]').forEach(function (x) {
  x.textContent = new Date(x.getAttribute('datetime')).toLocaleDateString(
    navigator.language, { weekday: 'short',year: 'numeric',month: 'long',day: 'numeric' }
  );
});

document.body.querySelectorAll('time.time-bubble[datetime]').forEach(function (x) {
  x.textContent = new Date(x.getAttribute('datetime')).toLocaleTimeString(
    navigator.language, { hour: "numeric",minute: "numeric" }
  );
});

const main = document.getElementById(#{idMain});
const chatOutput = document.getElementById(#{idChatOutput});
const form = document.getElementById(#{idMessageForm});
const input = document.getElementById(#{idMessageInput});
const buttonSend = document.getElementById(#{idButtonSend});

const ws = new WebSocket(
  '@{rtp $ ChatChannelR sid cid rid}'.replace('http:', 'ws:').replace('https:', 'wss:')
);

const ackObsever = new IntersectionObserver(
  function (entries, obsever) {
    entries.forEach(x => {
      fetch(x.target.dataset.read, { method: 'POST' }).then(() => {
        x.target.removeAttribute('notread');
      });
    });
  }, { root: chatOutput,
       threshold: 0.8
     }
);

chatOutput.querySelectorAll('.#{rawJS classBubble}.incoming[notread]').forEach(x => {
  ackObsever.observe(x);
});

main.scroll(0, main.scrollHeight);


ws.onmessage = function (e) {
  
  const data = JSON.parse(e.data);

  const isOutgoing = data.author === #{sid};
  const isIncoming = data.recipient === #{sid};
  
  if (data.type === #{WsMessageTypeDelivered} && isOutgoing) {
    
    const bubble = document.getElementById(`#{idBubblePref}${data.chatId}`);
    const bubbleDeleted = !bubble;
    if (!bubbleDeleted) {
      const icon = bubble.querySelector('i.#{rawJS classBubbleStatus}');
      icon.classList.add('tiny','tiny-margin');
      icon.textContent = 'done_all';
    }
    
  } else if (data.type === #{WsMessageTypeRead} && isOutgoing) {

    const bubble = document.getElementById(`#{rawJS idBubblePref}${data.chatId}`);
    const bubbleDeleted = !bubble;
    if (!bubbleDeleted) {
      const icon = bubble.querySelector('i.#{rawJS classBubbleStatus}');
      icon.classList.add('tiny','tiny-margin','green-text');
      icon.textContent = 'done_all';
    }
    
  } else if (data.type === #{WsMessageTypeRemove}) {

    const bubble = document.getElementById(`#{rawJS idBubblePref}${data.chatId}`);
    const bubbleDeleted = !bubble;
    
    if (!bubbleDeleted && bubble.classList.contains('incoming')) {
      
      bubble.querySelector('.#{rawJS classBubbleContent}').replaceWith((() => {
        const span = document.createElement('span');
        span.classList.add(#{classBubbleContent},'small-text','secondary-text');
        span.textContent = #{msgr MsgRemoved};
        return span;
      }) ());
      
    } else if (!bubbleDeleted && bubble.classList.contains('outgoing') && data.source === #{rid}) {

      bubble.querySelector('.#{rawJS classBubbleContent}').classList.add('secondary-text','small-text');
      const statusLine = bubble.querySelector('.#{rawJS classBubbleStatusLine}');
      
      if (!statusLine.querySelector('.#{rawJS classRemoved}')) {
        statusLine.querySelector('.#{rawJS classBubbleStatus}').after((() => {
          const icon = document.createElement('i');
          icon.classList.add(#{classRemoved},'tiny','tiny-margin');
          bubble.setAttribute('title',#{msgr MsgRemovedByRecipient});
          icon.textContent = 'delete_sweep';   
          return icon;
        }) ());
      }
      
    } else if (!bubbleDeleted && bubble.classList.contains('outgoing') && data.source === #{sid}) {
      
      bubble.querySelector('.#{rawJS classBubbleContent}').replaceWith((() => {
        const span = document.createElement('span');
        span.classList.add(#{classBubbleContent},'small-text','secondary-text');
        span.textContent = #{msgr MsgRemoved};
        return span;
      }) ());
      
    }
    
  } else if (data.type === #{WsMessageTypeDelete}) {

    const bubble = document.getElementById(`#{rawJS idBubblePref}${data.chatId}`);
    const bubbleDeleted = !bubble;
    if (! bubbleDeleted) {
      bubble.remove();
    }

  } else if (data.type === #{WsMessageTypeUndo} && data.source === #{sid}) {

    const bubble = document.getElementById(`#{rawJS idBubblePref}${data.chatId}`);
    const bubbleDeleted = !bubble;
    
    if (! bubbleDeleted) {
      const content = bubble.querySelector('.#{rawJS classBubbleContent}');
      content.classList.remove('small-text','secondary-text')
      content.innerHTML = data.message;      
    }

  } else if (data.type === #{WsMessageTypeUndo} && data.source === #{rid}) {

    const bubble = document.getElementById(`#{rawJS idBubblePref}${data.chatId}`);
    const bubbleDeleted = !bubble;
    
    if (! bubbleDeleted) {
      const content = bubble.querySelector('.#{rawJS classBubbleContent}');
      content.classList.remove('small-text','secondary-text')
      content.innerHTML = data.message;
      
      const statusLine = bubble.querySelector('.#{rawJS classBubbleStatusLine}');
      const icon = statusLine.querySelector('.#{rawJS classRemoved}');
      
      if (icon) {
        icon.remove();
      }
      
    }

  } else if (data.type === #{WsMessageTypeChat}) {
    
    const bubbleRow = chatOutput.appendChild((() => {
      
      const row = document.createElement('div');
      row.id = `#{rawJS idBubbleRowPref}${data.chatId}`;
      row.classList.add(#{classBubbleRow}, 'small-round', isOutgoing ? 'outgoing' : 'incoming');
      
      const bubble = row.appendChild((() => {
        
        const bubble = document.createElement('div');
        bubble.id = `#{rawJS idBubblePref}${data.chatId}`;
        bubble.classList.add(#{classBubble}, isOutgoing ? 'outgoing' : 'incoming');
        bubble.setAttribute('data-read',data.links.read);

        if ('replied' in data) {
          
          const link = bubble.appendChild((() => {
            const link = document.createElement('a');
            link.classList.add(#{classReplyRef});
            link.href = `##{rawJS idBubblePref}${data.replied.chatId}`;

            link.appendChild((() => {
              const blockquote = document.createElement('blockquote');
              blockquote.classList.add(#{classBlockquoteReplyRef});
              blockquote.innerHTML = data.replied.message;
              blockquote.prepend((() => {
                const span = document.createElement('span');
                span.classList.add('small-text','primary-text');
                span.textContent = data.replied.authorName;

                return span;
              }) ());

              blockquote.onmouseenter = function (e) {
                const ref = document.getElementById(`#{rawJS idBubbleRowPref}${data.replied.chatId}`);
                ref.style.backgroundColor = 'rgba(0,0,0,0.2)';
              };

              blockquote.onmouseleave = function (e) {
                const ref = document.getElementById(`#{rawJS idBubbleRowPref}${data.replied.chatId}`);
                ref.style.backgroundColor = 'transparent';
              };
              
              return blockquote;
            }) ());
            
            return link;
          }) ());
        }
        
        const content = bubble.appendChild((() => {
          const content = document.createElement('span');
          content.classList.add(#{classBubbleContent});
          content.innerHTML = data.message;
          return content;
        }) ());

        const statusLine = bubble.appendChild((() => {
          
          const statusLine = document.createElement('div');
          statusLine.classList.add(#{classBubbleStatusLine},'secondary-text');

          statusLine.appendChild((() => {
            const time = document.createElement('time');
            time.setAttribute('datetime', data.created);
            time.classList.add('time-bubble','small-text');
            time.appendChild(document.createTextNode(new Date(data.created).toLocaleTimeString(
              navigator.language, { hour: 'numeric', minute: 'numeric' }
            )));
            return time;
          }) ());

          if (isOutgoing) {
            statusLine.appendChild((() => {
              const icon = document.createElement('i');
              icon.classList.add(#{classBubbleStatus},'tiny','tiny-margin');
              icon.textContent = 'check';   
              return icon;
            }) ());
          }

          statusLine.appendChild((() => {
            const anchor = document.createElement('button');
            anchor.classList.add(#{classMenuAnchor},'small','transparent','square','no-margin');
            
            anchor.appendChild((() => {
              const icon = document.createElement('i');
              icon.classList.add('tiny');
              icon.appendChild(document.createTextNode('more_vert'));
              return icon;            
            }) ());

            const menu = anchor.appendChild((() => {
              
              const menu = document.createElement('menu');
              menu.id = `#{rawJS idBubbleMenuPref}${data.chatId}`;
              menu.classList.add('left','top','no-wrap');
              menu.style.display = 'none';
              
              const itemReply = menu.appendChild((() => {
                
                const itemReply = document.createElement('li');
                itemReply.classList.add(#{classActionReply},'wave');
                itemReply.setAttribute('data-ui',`#${menu.id}`);
                
                itemReply.appendChild((() => {
                  const icon = document.createElement('i');
                  icon.textContent = 'reply';                
                  return icon;
                }) ());
                
                itemReply.appendChild((() => {
                  const span = document.createElement('span');
                  span.textContent = #{msgr MsgReply};
                  return span;
                }) ());

                itemReply.onclick = function (e) {
                  main.prepend((() => {
                    const blockquote = document.createElement('blockquote');
                    blockquote.setAttribute('data-reply',data.chatId);
                    blockquote.innerHTML = content.innerHTML;

                    blockquote.prepend((() => {
                      const span = document.createElement('span');
                      span.classList.add('primary-text','small-text');
                      span.textContent = data.authorName;
                      
                      return span;
                    }) ());

                    blockquote.appendChild((() => {
                      const close = document.createElement('button');
                      close.classList.add('small','transparent','circle');
                      close.style.position = 'absolute';
                      close.style.inset = '0 0 auto auto';
                      close.appendChild((() => {
                        const icon = document.createElement('i');
                        icon.textContent = 'close';
                        return icon;
                      }) ());

                      close.onclick = function (e) {
                        blockquote.remove();
                      };
                      
                      return close;
                    }) ());
                    
                    return blockquote;
                  }) ());
                  
                  main.scroll(0, main.scrollHeight);                
                };
                
                return itemReply;
              }) ());
              
              const itemCopy = menu.appendChild((() => {
                
                const itemCopy = document.createElement('li');
                itemCopy.classList.add(#{classActionCopy},'wave');
                itemCopy.setAttribute('data-ui',`#${menu.id}`);
                
                itemCopy.appendChild((() => {
                  const i = document.createElement('i');
                  i.textContent = 'content_copy';                
                  return i;
                }) ());
                
                itemCopy.appendChild((() => {
                  const span = document.createElement('span');
                  span.textContent = #{msgr MsgCopy};
                  return span;
                }) ());

                itemCopy.onclick = function (e) {
                  
                  navigator.clipboard.writeText(
                    bubble.querySelector('.#{rawJS classBubbleContent}').textContent
                  ).then(() => {
                    
                    const snackbar = document.createElement('div');
                    snackbar.classList.add('snackbar','active');
                    
                    snackbar.appendChild((() => {
                      const content = document.createElement('div');
                      content.classList.add('max');
                      content.textContent = #{msgr MsgContentCopied};
                      return content;
                    }) ());
                    
                    snackbar.appendChild((() => {
                      const close = document.createElement('button');
                      close.classList.add('close','transparent','circle','small');
                      close.addEventListener('click', e => {
                        snackbar.remove();
                      });
                      close.appendChild((() => {
                        const icon = document.createElement('i');
                        icon.textContent = 'close';
                        return icon; 
                      }) ());         
                      return close;
                    }) ());
                    
                    document.body.appendChild(snackbar);

                    setTimeout(() => { snackbar.remove(); }, 2000);
                    
                  });
                };
                
                return itemCopy;
              }) ());
              
              const itemDelete = menu.appendChild((() => {
                
                const itemDelete = document.createElement('li');
                itemDelete.classList.add(#{classActionDelete},'wave');
                itemDelete.setAttribute('data-ui',`#${menu.id}`);
                
                itemDelete.appendChild((() => {
                  const i = document.createElement('i');
                  i.textContent = 'delete';
                  return i;
                }) ());
                
                itemDelete.appendChild((() => {
                  const span = document.createElement('span');
                  span.textContent = #{msgr MsgDele};
                  return span;
                }) ());

                itemDelete.setAttribute('data-ui', `##{rawJS idDialogDeletePref}${data.chatId}`);
                
                return itemDelete;
              }) ());
              
              return menu;
            }) ());

            anchor.setAttribute('data-ui',`#${menu.id}`);
            
            anchor.onclick = function (e) {
              const v = anchor.getBoundingClientRect().top > (window.innerHeight / 2) ? 'top' : 'bottom';
              const h = anchor.getBoundingClientRect().left > (window.innerWidth / 2) ? 'left' : 'right';
              menu.classList.remove('top','bottom','left','right');
              menu.classList.add(v,h);
              menu.style.display = 'block';
            };
            
            return anchor;
          }) ());

          statusLine.appendChild((() => {
            const dialog = document.createElement('dialog');
            dialog.id = `#{rawJS idDialogDeletePref}${data.chatId}`;
            
            dialog.appendChild((() => {
              const title = document.createElement('h6');
              title.textContent = #{msgr MsgConfirmPlease};
              return title;
            }) ());

            dialog.appendChild((() => {
              const content = document.createElement('p');
              content.textContent = #{msgr MsgDeleteAreYouSure};
              return content;
            }) ());

            dialog.appendChild((() => {
              const nav = document.createElement('nav');
              nav.classList.add('right-align');
              
              nav.appendChild((() => {
                const cancel = document.createElement('button');
                cancel.classList.add('transparent','link');
                cancel.textContent = #{msgr MsgCancel};
                cancel.setAttribute('data-ui', `##{rawJS idDialogDeletePref}${data.chatId}`);
                return cancel;
              }) ());

              if (isOutgoing) {
                
                nav.appendChild((() => {
                  const del = document.createElement('button');
                  del.classList.add('error');
                  del.textContent = #{msgr MsgDele};
                  del.setAttribute('data-ui',`##{rawJS idDialogDeletePref}${data.chatId}`);
                  
                  del.onclick = function (e) {
                    
                    fetch(data.links['delete'], {
                      method: 'DELETE',
                      headers: { 'Accept': 'application/json' }
                    }).then(res => {
                      
                      res.json().then(function (data) {

                        document.querySelectorAll('.snackbar').forEach(x => { x.remove(); });
                        
                        const snackbar = document.createElement('div');
                        snackbar.classList.add('snackbar','active');
                        
                        snackbar.appendChild((() => {
                          const content = document.createElement('div');
                          content.classList.add('max');
                          content.textContent = #{msgr MsgMessageDeleted};
                          return content;
                        }) ());
                        
                        snackbar.appendChild((() => {
                          const close = document.createElement('button');
                          close.classList.add('close','transparent','circle','small');
                          close.addEventListener('click', e => {
                            snackbar.remove();
                          });
                          close.appendChild((() => {
                            const icon = document.createElement('i');
                            icon.textContent = 'close';
                            return icon; 
                          }) ());         
                          return close;
                        }) ());
                        
                        document.body.appendChild(snackbar);
                        setTimeout(() => { snackbar.remove(); }, 6000);
                      });
                      
                    }).catch(err => {
                      
                      const snackbar = document.createElement('div');
                      snackbar.classList.add('snackbar','error','active');
                      
                      snackbar.appendChild((() => {
                        const content = document.createElement('div');
                        content.classList.add('max');
                        content.textContent = err.message;
                        return content;
                      }) ());
                      
                      snackbar.appendChild((() => {
                        const close = document.createElement('button');
                        close.classList.add('close','transparent','circle','small');
                        close.addEventListener('click', e => {
                          snackbar.remove();
                        });
                        close.appendChild((() => {
                          const icon = document.createElement('i');
                          icon.textContent = 'close';
                          return icon; 
                        }) ());         
                        return close;
                      }) ());
                      
                      document.body.appendChild(snackbar);
                      setTimeout(() => { snackbar.remove(); }, 6000); 
                    });
                  };
                  
                  return del;
                }) ());
              }
              
              const buttonRemove = nav.appendChild((() => {
                const remove = document.createElement('button');
                remove.textContent = #{msgr MsgRemove};
                remove.setAttribute('data-ui',`##{rawJS idDialogDeletePref}${data.chatId}`);
                
                remove.onclick = function (e) {
                  
                  const xref = isOutgoing ? data.links['remove'] : data.links['dismiss'];

                  fetch(xref, {
                    method: 'DELETE',
                    headers: { 'Accept': 'application/json' }
                  }).then(res => {
                    
                    res.json().then(function (data) {

                      document.querySelectorAll('.snackbar').forEach(x => { x.remove(); });
                      
                      const snackbar = document.createElement('div');
                      snackbar.classList.add('snackbar','active');
                      
                      snackbar.appendChild((() => {
                        const content = document.createElement('div');
                        content.classList.add('max');
                        content.textContent = #{msgr MsgMessageRemoved};
                        return content;
                      }) ());
                      
                      snackbar.appendChild((() => {
                        const undo = document.createElement('button');
                        undo.classList.add('transparent','inverse-link');
                        undo.textContent = #{msgr MsgUndo};
                        undo.onclick = function (e) {
                          fetch(data.links.undo, {
                            method: 'POST',
                            headers: { 'Accept': 'application/json' }
                          }).then(_ => {
                            snackbar.remove();
                          });
                        };
                        return undo;
                      }) ());
                      
                      snackbar.appendChild((() => {
                        const close = document.createElement('button');
                        close.classList.add('close','transparent','circle','small');
                        close.addEventListener('click', e => {
                          snackbar.remove();
                        });
                        close.appendChild((() => {
                          const icon = document.createElement('i');
                          icon.textContent = 'close';
                          return icon; 
                        }) ());         
                        return close;
                      }) ());
                      
                      document.body.appendChild(snackbar);
                      setTimeout(() => { snackbar.remove(); }, 6000);
                    });
                    
                  }).catch(err => {
                    
                    const snackbar = document.createElement('div');
                    snackbar.classList.add('snackbar','error','active');
                    
                    snackbar.appendChild((() => {
                      const content = document.createElement('div');
                      content.classList.add('max');
                      content.textContent = err.message;
                      return content;
                    }) ());
                    
                    snackbar.appendChild((() => {
                      const close = document.createElement('button');
                      close.classList.add('close','transparent','circle','small');
                      close.addEventListener('click', e => {
                        snackbar.remove();
                      });
                      close.appendChild((() => {
                        const icon = document.createElement('i');
                        icon.textContent = 'close';
                        return icon; 
                      }) ());         
                      return close;
                    }) ());
                    
                    document.body.appendChild(snackbar);
                    setTimeout(() => { snackbar.remove(); }, 6000); 
                  });
                };
                
                return remove;
              }) ());
              
              return nav;
            }) ());
            
            return dialog; 
          }) ());
          
          return statusLine;
        }) ());

        const bubbleTailOut = bubble.appendChild((() => {
          const bubbleTailOut = document.createElement('span');
          bubbleTailOut.classList.add('bubble-tail-out');
          bubbleTailOut.appendChild((() => {
            const bubbleTail = document.createElement('span');
            bubbleTail.classList.add('bubble-tail');
            return bubbleTail;
          }) ());
          
          return bubbleTailOut;
        }) ());

        if (isIncoming) {
          fetch(data.links.delivered, { method: 'POST' });
          ackObsever.observe(bubble);
          setTimeout(() => {
            document.getElementById(#{idAudioIncomingChat}).play().catch(_ => {});
          }, 0);
        }
        
        return bubble;
      }) ());

      return row;
    }) ());
    
    if (!document.hidden) {
      main.scroll(0, main.scrollHeight);
    }

  }
  
};

ws.onerror = function (e) {
  location.reload();
}; 


form.addEventListener('submit', function(e) {
  e.preventDefault();

  const replied = main.querySelector('* > blockquote[data-reply]');
  
  const chatIdRep = replied?.dataset.reply;
  
  ws.send( JSON.stringify({ type: #{WsMessageTypeChat},
                            message: input.value,
                            ... (!isNaN(chatIdRep) && { reply: Number(chatIdRep) })
                          })
         );

  replied?.remove();
  input.value = '';
  buttonSend.disabled = true;
  
  input.focus();
  
  setTimeout(() => {
    document.getElementById(#{idAudioOutgoingChat}).play().catch(_ => {});
  }, 0);
  
});


input.addEventListener('input',function (e) {
  buttonSend.disabled = !(this.value && this.value.trim());
});


document.getElementById(#{idButtonVideoCall}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{PushMsgTypeVideoCall},
      icon: '@{icon}',
      title: #{msgr MsgAppName},
      body: #{msgr $ MsgIncomingVideoCallFrom callerName},
      videor: true,
      audior: true,
      videos: true,
      audios: true
    })
  }).then(function (result) {
    document.getElementById(#{idOverlayDialogOutgoingCall}).classList.add('active');
    document.getElementById(#{idDialogOutgoingCall}).show();
    document.getElementById(#{idAudioOutgoingCallRingtone}).play().catch(_ => {});
  }).catch(function (err) {
    console.error(err);
  });

});

document.getElementById(#{idButtonAudioCall}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{PushMsgTypeAudioCall},
      icon: '@{icon}',
      title: #{msgr MsgAppName},
      body: #{msgr $ MsgIncomingAudioCallFrom callerName},
      videor: false,
      audior: true,
      videos: false,
      audios: true
    })
  }).then(function (result) {
    document.getElementById(#{idOverlayDialogOutgoingCall}).classList.add('active');
    document.getElementById(#{idDialogOutgoingCall}).show();
    document.getElementById(#{idAudioOutgoingCallRingtone}).play().catch(_ => {});
  }).catch(function (err) {
    console.error(err);
  });

});

document.getElementById(#{idButtonOutgoingCallCancel}).addEventListener('click', function (event) {

  fetch('@{video}', {
    method: 'POST',
    headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      messageType: #{PushMsgTypeCancel},
      title: #{msgr MsgAppName},
      icon: '@{iconCallEnd}',
      body: #{msgr $ MsgCallCanceledByCaller callerName},
      videor: false,
      audior: false,
      videos: false,
      audios: false
    })
  }).then(function (result) {
    document.getElementById(#{idAudioOutgoingCallRingtone}).pause();
    document.getElementById(#{idDialogOutgoingCall}).close();
    document.getElementById(#{idOverlayDialogOutgoingCall}).classList.remove('active');
  }).catch(function (err) {
    console.error(err);
  });

});


navigator.serviceWorker.addEventListener('message', function (message) {
  
  if (message.data.messageType === #{PushMsgTypeAccept}) {
    
    document.getElementById(#{idAudioOutgoingCallRingtone}).pause();
    document.getElementById(#{idDialogOutgoingCall}).close();
    document.getElementById(#{idOverlayDialogOutgoingCall}).classList.remove('active');
    
    const params = new URLSearchParams({
      backlink: '@{backlink}',
      videor: message.data.videor,
      audior: message.data.audior,
      videos: message.data.videos,
      audios: message.data.audios
    });

    window.location.href = `@{outgoing}?${params}`;
    
  } else if (message.data.messageType === #{PushMsgTypeDecline}) {

    document.getElementById(#{idAudioOutgoingCallRingtone}).pause();
    document.getElementById(#{idDialogOutgoingCall}).close();
    document.getElementById(#{idOverlayDialogOutgoingCall}).classList.remove('active');
    
    document.getElementById(#{idOverlayDialogCallDeclined}).classList.add('active');
    document.getElementById(#{idDialogCallDeclined}).show();
    
  } else if (message.data.messageType === #{PushMsgTypeRefresh}) {
    
    window.location.reload();
    
  }
  
});


chatOutput.querySelectorAll('.#{rawJS classBubble}').forEach(bubble => {

  const content = bubble.querySelector('.#{rawJS classBubbleContent}');
  const anchor = bubble.querySelector('button.#{rawJS classMenuAnchor}');
  const menu = anchor.querySelector('menu');
  
  anchor.onclick = function (e) {
    const v = anchor.getBoundingClientRect().top > (window.innerHeight / 2) ? 'top' : 'bottom';
    const h = anchor.getBoundingClientRect().left > (window.innerWidth / 2) ? 'left' : 'right';
    menu.classList.remove('top','bottom','left','right');
    menu.classList.add(v,h);
    menu.style.display = 'block';
  };

  menu.querySelector('li.#{rawJS classActionReply}').onclick = function (e) {
    
    main.prepend((() => {
      const blockquote = document.createElement('blockquote');
      blockquote.setAttribute('data-reply', bubble.dataset.chatId);
      blockquote.innerHTML = content.innerHTML;

      blockquote.prepend((() => {
        const span = document.createElement('span');
        span.classList.add('primary-text','small-text');
        span.textContent = bubble.dataset.author;
        
        return span;
      }) ());

      blockquote.appendChild((() => {
        const close = document.createElement('button');
        close.classList.add('small','transparent','circle');
        close.style.position = 'absolute';
        close.style.inset = '0 0 auto auto';
        close.appendChild((() => {
          const icon = document.createElement('i');
          icon.textContent = 'close';
          return icon;
        }) ());

        close.onclick = function (e) {
          blockquote.remove();
        };
        
        return close;
      }) ());
      
      return blockquote;
    }) ());

  };
    
  menu.querySelector('li.#{rawJS classActionCopy}').onclick = function (e) {
    
    navigator.clipboard.writeText(
      bubble.querySelector('.#{rawJS classBubbleContent}').textContent
    ).then(() => {
      
      const snackbar = document.createElement('div');
      snackbar.classList.add('snackbar','active');
      
      snackbar.appendChild((() => {
        const content = document.createElement('div');
        content.classList.add('max');
        content.textContent = #{msgr MsgContentCopied};
        return content;
      }) ());
      
      snackbar.appendChild((() => {
        const close = document.createElement('button');
        close.classList.add('close','transparent','circle','small');
        close.addEventListener('click', e => {
          snackbar.remove();
        });
        close.appendChild((() => {
          const icon = document.createElement('i');
          icon.textContent = 'close';
          return icon; 
        }) ());         
        return close;
      }) ());
      
      document.body.appendChild(snackbar);

      setTimeout(() => { snackbar.remove(); }, 2000);
      
    });
  };
  
  bubble.querySelectorAll('dialog.#{rawJS classDeleteActions} button[data-action]').forEach(button => {
    
    button.onclick = function (e) {
      
      fetch(e.target.dataset.action, {
        method: 'DELETE',
        headers: { 'Accept': 'application/json' }
      }).then(res => {
        
        res.json().then(function (data) {

          document.querySelectorAll('.snackbar').forEach(x => { x.remove(); });
          
          const snackbar = document.createElement('div');
          snackbar.classList.add('snackbar','active');
          
          snackbar.appendChild((() => {
            const content = document.createElement('div');
            content.classList.add('max');
            content.textContent = data.type === #{WsMessageTypeRemove}
              ? #{msgr MsgMessageRemoved} : #{msgr MsgMessageDeleted};
            return content;
          }) ());

          if (data.type === #{WsMessageTypeRemove}) {
            snackbar.appendChild((() => {
              const undo = document.createElement('button');
              undo.classList.add('transparent','inverse-link');
              undo.textContent = #{msgr MsgUndo};
              undo.onclick = function (e) {
                fetch(data.links.undo, {
                  method: 'POST',
                  headers: { 'Accept': 'application/json' }
                }).then(_ => {
                  snackbar.remove();
                });
              };
              return undo;
            }) ());
          }
          
          snackbar.appendChild((() => {
            const close = document.createElement('button');
            close.classList.add('close','transparent','circle','small');
            close.addEventListener('click', e => {
              snackbar.remove();
            });
            close.appendChild((() => {
              const icon = document.createElement('i');
              icon.textContent = 'close';
              return icon;
            }) ());         
            return close;
          }) ());
          
          document.body.appendChild(snackbar);
          setTimeout(() => { snackbar.remove(); }, 6000);
        });
        
      }).catch(err => {
        
        const snackbar = document.createElement('div');
        snackbar.classList.add('snackbar','error','active');
        
        snackbar.appendChild((() => {
          const content = document.createElement('div');
          content.classList.add('max');
          content.textContent = err.message;
          return content;
        }) ());
        
        snackbar.appendChild((() => {
          const close = document.createElement('button');
          close.classList.add('close','transparent','circle','small');
          close.addEventListener('click', e => {
            snackbar.remove();
          });
          close.appendChild((() => {
            const icon = document.createElement('i');
            icon.textContent = 'close';
            return icon; 
          }) ());         
          return close;
        }) ());
        
        document.body.appendChild(snackbar);
        setTimeout(() => { snackbar.remove(); }, 6000); 
      }).finally(() => {
        menu.classList.remove('active');
      });
      
    };
  });

  bubble.querySelectorAll('blockquote.#{rawJS classBlockquoteReplyRef}').forEach(blockquote => {

    blockquote.onmouseenter = function (e) {
      const ref = document.getElementById(e.target.dataset.ref.substring(1));
      ref.style.backgroundColor = 'rgba(0,0,0,0.2)';
    };

    blockquote.onmouseleave = function (e) {
      const ref = document.getElementById(e.target.dataset.ref.substring(1));
      ref.style.backgroundColor = 'transparent';
    };
  });
  
});


Array.from(
  document.querySelectorAll('.snackbar')
).map(
  x => [x,Array.from(x.querySelectorAll('button.close'))]
).forEach(([snackbar,buttons]) => {
  buttons.forEach(x => x.addEventListener('click', e => { snackbar.classList.remove('active'); }));
});


setTimeout(() => {
  document.querySelectorAll('.snackbar').forEach(x => { x.classList.remove('active'); });
}, 6000);
