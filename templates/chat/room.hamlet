
<header.fixed.primary>              
  <nav.responsive.max.no-space>
    <div.row.no-space>
      <a.button.circle.transparent.no-margin href=@{backlink} role=button title=_{MsgBack}>
        <i>arrow_back
        
      <img.tiny.circle src=@{photor} alt=_{MsgPhoto} loading=lazy>

    <div.max.small-margin.interlocutor>
      <div.interlocutor>
        $maybe Entity _ (User email _ _ _ _ name _ _) <- interlocutor
          $maybe name <- name
            #{name}
          $nothing
            #{email}

    <button.circle.transparent type=button title=_{MsgVideoCall} ##{idButtonVideoCall}>
      <i>video_call
      $if (||) ((||) (not subscribed) (not accessible)) loop
        <div.badge>

    <button.circle.transparent type=button title=_{MsgAudioCall} ##{idButtonAudioCall}>
      <i>call
      $if (||) ((||) (not subscribed) (not accessible)) loop
        <div.badge>

    <button.circle.transparent type=button title=_{MsgActions}>
      <i>more_vert
      <menu.no-wrap.left>
        $maybe backlink <- rndr <$> curr
          <li>
            <a href=@?{(contact,[(paramBacklink, backlink)])}>
              _{MsgViewContact}
              

<main.responsive.no-padding ##{idMain}>

  <div ##{idChatOutput}>

    $forall (day,logs) <- dayLogs
      $with dt <- show day
        <time.day-bubble.small-text.tiny-padding.tiny-margin.small-elevate.round datetime=#{dt}>
          #{dt}
        
      $forall (Entity xid (Chat author recipient logType time msg delivered _ read _ rmByA rmByR _ _),(owner,replied)) <- logs

        $with (incoming, outgoing) <- (sid == recipient, sid == author)
          $if incoming && rmByR

          $else

            <div.#{classBubble} ##{idBubblePref}#{(show . fromSqlKey) xid}
                :incoming:.incoming :outgoing:.outgoing :not read:notread
                data-read=@{rtp $ ChatReadR sid cid rid xid} data-chat-id=#{xid}
                data-author=#{fromMaybe (((.) userEmail entityVal) owner) (((.) userName entityVal) owner)}>

              $with (chat,author) <- replied
                $maybe Entity yid (Chat _ _ _ _ msg _ _ _ _ _ _ _ _) <- chat
                  <a.#{classReplyRef} href=##{idBubblePref}#{(show . fromSqlKey) yid}>
                    <blockquote.#{classBlockquoteReplyRef}>
                      $maybe Entity _ (User email _ _ _ _ name _ _) <- author
                        <span.small-text.primary-text>
                          $maybe name <- name
                            #{name}
                          $nothing
                            #{email}

                      #{preEscapedText $ commonmarkToHtml [] msg}

                <span.#{classBubbleContent} :rmByA || rmByR:.secondary-text :rmByA || rmByR:.small-text>
                  $case logType
                    $of ChatTypeVideoCall
                      <i.tiny.tiny-margin style="vertical-align:bottom">
                        videocam
                      _{MsgVideoCall}

                    $of ChatTypeAudioCall
                      <i.tiny.tiny-margin style="vertical-align:bottom">
                        call
                      _{MsgAudioCall}

                    $of ChatTypeMessage
                      $if not (rmByA || rmByR)
                        #{preEscapedText $ commonmarkToHtml [] msg}

                      $elseif all id [outgoing, rmByA]
                        _{MsgRemoved}

                      $elseif all id [incoming, rmByA, not rmByR]
                        _{MsgRemoved}

                      $elseif all id [outgoing, not rmByA, rmByR]
                        #{msg}

                      $else

                <span.#{classBubbleStatusLine}.secondary-text>

                  $with dt <- show time
                    <time.time-bubble.small-text datetime=#{dt}>
                      #{dt}

                  $if outgoing
                    $if read
                      <i.#{classBubbleStatus}.tiny.no-margin.green-text>
                        done_all

                    $elseif delivered
                      <i.#{classBubbleStatus}.tiny.no-margin>
                        done_all

                    $else
                      <i.#{classBubbleStatus}.tiny.no-margin>
                        check

                  $if all id [outgoing, not rmByA, rmByR]
                    <i.#{classRemoved}.tiny.no-margin title=_{MsgRemovedByRecipient}>
                      delete_sweep

                  <button.#{classMenuAnchor}.small.transparent.square.no-margin data-ui=##{idBubbleMenuPref}#{xid}>
                    <i.tiny>more_vert

                    <menu.no-wrap.top :incoming:.right :outgoing:.left ##{idBubbleMenuPref}#{xid}>

                      <li.#{classActionReply}.wave data-ui=##{idBubbleMenuPref}#{xid}>
                        <i>reply
                        _{MsgReply}

                      <li.#{classActionCopy}.wave data-ui=##{idBubbleMenuPref}#{xid}>
                        <i>content_copy
                        _{MsgCopy}

                      <li.#{classActionDelete}.wave data-ui=##{idDialogDeletePref}#{xid}>
                        <i>delete
                        _{MsgDele}


                  <div.overlay ##{idOverlayDialogDeletePref}#{xid}>

                  <dialog.#{classDeleteActions} ##{idDialogDeletePref}#{xid}>
                    <h6>
                      _{MsgConfirmPlease}

                    <p>
                      _{MsgDeleteAreYouSure}

                    <nav.right-align>
                      <button.transparent.link data-ui=##{idDialogDeletePref}#{xid}>
                        _{MsgCancel}

                      $if outgoing
                        <button.error data-action=@{rtp $ ChatDeleteR sid cid rid xid} role=button 
                                      data-ui=##{idDialogDeletePref}#{xid} data-ui=##{idBubbleMenuPref}#{xid}>
                          _{MsgDele}

                      <button data-action=@{rtp $ ChatRemoveR sid cid rid xid} role=button 
                              data-ui=##{idDialogDeletePref}#{xid} data-ui=##{idBubbleMenuPref}#{xid}>
                        _{MsgRemove}

                <span.bubble-tail-out>
                  <span.bubble-tail>


<footer>
  <form.row.tiny-space ##{idMessageForm}>
    <div.responsive.max.field.textarea.min.border.round>
      <textarea ##{idMessageInput} autofocus placeholder=_{MsgMessage}>
      
    <button.circle type=submit disabled ##{idButtonSend}>
      <i>send

  <audio ##{idAudioOutgoingChat} preload=none>
    $with (ringtone, mime) <- outgoingChatRingtoneR
      <source src=@{ringtone} type=#{mime}>

  <audio ##{idAudioIncomingChat} preload=none playsinline>
    $with (ringtone, mime) <- incomingChatRingtoneR
      <source src=@{ringtone} type=#{mime}>


$forall (s,msg) <- msgs
  <div.snackbar.active :s == msgError:.error>
    <div.max>
      #{msg}
    <button.close.transparent.circle.small>
      <i>close


<div.overlay ##{idOverlayDialogOutgoingCall}>

<dialog ##{idDialogOutgoingCall}>
  <h6>
    _{MsgOutgoingCall}...

  <div.content.vertical-margin>
    
    <figure>
      <img.circle src=@{photos} alt=_{MsgPhoto} loading=lazy>
      $if not subscribed
        <figcaption.small-text>
          $maybe Entity _ (User email _ _ _ _ name _ _) <- user
            $maybe name <- name
              _{MsgUserYouSeemsUnsubscribed name}
            $nothing
              _{MsgUserYouSeemsUnsubscribed email}

    <figure.between>
    
      $if loop
        <i>repeat
      $else
        <i.callarrow>double_arrow

      $if loop
        <figcaption.small-text>
          _{MsgCallerCalleeSubscriptionLoopWarning}
      

    <figure>
      <img.circle src=@{photor} alt=_{MsgPhoto} loading=lazy>
      $if not accessible
        <figcaption.small-text>
          $maybe Entity _ (User email _ _ _ _ name _ _) <- interlocutor
            $maybe name <- name
              _{MsgUserAppearsToBeUnavailable name}
            $nothing
              _{MsgUserAppearsToBeUnavailable email}

  <nav.right-align>
  
    <audio loop ##{idAudioOutgoingCallRingtone} preload=none>
      $with (ringtone, mime) <- outgoingCallRingtoneR
        <source src=@{ringtone} type=#{mime}>
  
    $if not subscribed
      $maybe backlink <- rndr <$> curr
        <a.button.transparent.link href=@?{(contact,[(paramBacklink, backlink)])}>
          _{MsgSubscribe}
      
    <button.error type=button ##{idButtonOutgoingCallCancel}>
      <i>call_end
      _{MsgCancel}


<div.overlay ##{idOverlayDialogCallDeclined}>

<dialog ##{idDialogCallDeclined}>
  <h6>
    _{MsgCallDeclined}

  <figure.center-align.vertical-margin>
    <i.extra.margin>phone_disabled
    
    <figcaption.large-text>
      $maybe Entity _ (User email _ _ _ _ name _ _) <- interlocutor
        $maybe name <- name
          _{MsgCalleeDeclinedTheCall name}
        $nothing
          _{MsgCalleeDeclinedTheCall email}

  <nav.right-align>
    <button type=button data-ui=##{idDialogCallDeclined}>
      _{MsgClose}
