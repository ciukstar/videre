
navigator.serviceWorker.register('@{ServiceWorkerR}', { scope: '/' }).then((registration) => {
  registration.addEventListener('updatefound', (event) => {
    
    const endpoint = localStorage.getItem(#{keyWebPushSubscriptionEndpoint});

    if (endpoint) {
      
      registration.pushManager.getSubscription().then(function (subscription) {
	
	if (!subscription) {
	  
	  Notification.requestPermission().then(function (permission) {
	    
	    if (permission === 'granted') {
	      
	      registration.pushManager.subscribe({
		userVisibleOnly: true,
		applicationServerKey: new Uint8Array(#{toJSON applicationServerKey})
	      }).then((subscription) => {
		
		const subscr = JSON.parse(JSON.stringify(subscription));
		
		fetch('@{PushSubscriptionEndpointR}', {
		  method: 'PUT',
		  headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
		  body: new URLSearchParams({
		    endpoint: subscr.endpoint,
		    p256dh: subscr.keys.p256dh,
		    auth: subscr.keys.auth,
		    oldendpoint: endpoint
		  })
		}).then((response) => {
		  localStorage.setItem(#{keyWebPushSubscriptionEndpoint}, subscr.endpoint);
		});
		
	      }).catch((err) => {
		
		registration.pushManager.getSubscription().then((subscription) => {
		  subscription.unsubscribe().then((sccess) => {
		    registration.pushManager.subscribe({
		      userVisibleOnly: true,
		      applicationServerKey: new Uint8Array(#{toJSON applicationServerKey})
		    }).then((subscription) => {
		      
		      const subscr = JSON.parse(JSON.stringify(subscription));
		      
		      fetch('@{PushSubscriptionEndpointR}', {
			method: 'PUT',
			headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
			body: new URLSearchParams({
			  endpoint: subscr.endpoint,
			  p256dh: subscr.keys.p256dh,
			  auth: subscr.keys.auth,
			  oldendpoint: endpoint
			})
		      }).then((response) => {
			localStorage.setItem(#{keyWebPushSubscriptionEndpoint}, subscr.endpoint);
		      });
		      
		    });
		  });
		});
		
	      });
	      
	    }
	    
	  });
	  
	}
      });
      
    }
    
  });
});


navigator.serviceWorker.addEventListener('message', (message) => {
  
  document.getElementById(#{idButtonIgnoreNotification}).addEventListener('click', function (e) {
    document.getElementById(#{idDialogChatNotification}).close();
  });

  [ [#{idButtonVideoCallDecline}, #{idDialogIncomingVideoCall}],
    [#{idButtonAudioCallDecline}, #{idDialogIncomingAudioCall}]
  ].forEach(([buttonId, dialogId]) => {
    document.getElementById(buttonId).onclick = function (event) {
      fetch('@{VideoR PushMessageR}', {
	method: 'POST',
	headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
	body: new URLSearchParams({
          messageType: #{show PushMsgTypeDecline},
	  title: #{msgr MsgAppName},
          icon: '@{StaticR img_phone_missed_FILL0_wght400_GRAD0_opsz24_svg}',
	  body: #{msgr $ MsgCalleeDeclinedTheCall calleeName},
          channelId: message.data.channelId,
          senderId: message.data.recipientId,
          recipientId: message.data.senderId,
	  videor: false,
	  audior: false,
	  videos: message.data.videos,
	  audios: message.data.audios,
	  callId: message.data.callId
	})
      }).then(function (result) {
	document.getElementById(dialogId).close();
      });
    }
  });

  [ [#{idButtonVideoCallAcceptAudio}, #{idDialogIncomingVideoCall}, { audio: true, video: false }],
    [#{idButtonAudioCallAcceptVideo}, #{idDialogIncomingAudioCall}, { audio: true, video: true }]
  ].forEach(([buttonId, dialogId, { audio, video }]) => {
    document.getElementById(buttonId).onclick = (event) => {
      fetch('@{VideoR PushMessageR}', {
	method: 'POST',
	headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
	body: new URLSearchParams({
          messageType: #{show PushMsgTypeAccept},
	  title: #{msgr MsgAppName},
          icon: '@{StaticR img_phone_in_talk_FILL0_wght400_GRAD0_opsz24_svg}',
	  body: #{msgr $ MsgInterlocutorStartedSession calleeName},
          channelId: message.data.channelId,
          senderId: message.data.recipientId,
          recipientId: message.data.senderId,
	  videor: video,
	  audior: audio,
	  videos: message.data.videos,
	  audios: message.data.audios,
	  callId: message.data.callId
	})
      }).then((result) => {

	document.getElementById(dialogId).close();

	const params = new URLSearchParams({
          senderId: message.data.recipientId,
          recipientId: message.data.senderId,
          channel: message.data.channelId,
	  videor: message.data.videor,
	  audior: message.data.audior,
	  videos: video,
	  audios: audio,
          backlink: '@{backlink}'
	});

	window.location.href = `@{VideoR $ IncomingR}?${params}`;

      });
    };
  });

  [ [#{idButtonVideoCallAccept}, #{idDialogIncomingVideoCall}],
    [#{idButtonAudioCallAccept}, #{idDialogIncomingAudioCall}]
  ].forEach(([buttonId, dialogId]) => {
    document.getElementById(buttonId).onclick = (event) => {
      fetch('@{VideoR PushMessageR}', {
	method: 'POST',
	headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
	body: new URLSearchParams({
          messageType: #{show PushMsgTypeAccept},
	  title: #{msgr MsgAppName},
          icon: '@{StaticR img_phone_in_talk_FILL0_wght400_GRAD0_opsz24_svg}',
	  body: #{msgr $ MsgInterlocutorStartedSession calleeName},
          channelId: message.data.channelId,
          senderId: message.data.recipientId,
          recipientId: message.data.senderId,
	  videor: message.data.videor,
	  audior: message.data.audior,
	  videos: message.data.videos,
	  audios: message.data.audios,
	  callId: message.data.callId
	})
      }).then((result) => {

	document.getElementById(dialogId).close();

	const params = new URLSearchParams({
          senderId: message.data.recipientId,
          recipientId: message.data.senderId,
          channel: message.data.channelId,
	  videor: message.data.videor,
	  audior: message.data.audior,
	  videos: message.data.videos,
	  audios: message.data.audios,
          backlink: '@{backlink}'
	});

	window.location.href = `@{VideoR $ IncomingR}?${params}`;

      });
    };
  });
  
});

navigator.serviceWorker.addEventListener('message', function (message) {

  if (message.data.messageType === #{show PushMsgTypeMessage}) {
    
    document.getElementById(#{idImgSenderPhoto}).src = message.data.image;
    document.getElementById(#{idFigcaptionSenderInfo}).textContent = message.data.senderName;
    document.getElementById(#{idNotificationBody}).textContent = message.data.body;
    document.getElementById(#{idButtonReplyNotification}).href = message.data.reply;
    document.getElementById(#{idDialogChatNotification}).show();

  } else if (message.data.messageType === #{show PushMsgTypeCancel}) {

    document.getElementById(#{idDialogIncomingVideoCall}).close();
    document.getElementById(#{idDialogIncomingAudioCall}).close();
    document.getElementById(#{idMissedCallCaller}).textContent = message.data.senderName;
    document.getElementById(#{idDialogMissedCall}).show();

  } else if (message.data.messageType === #{show PushMsgTypeVideoCall}) {
    
    document.getElementById(#{idImgVideoCallerPhoto}).src = message.data.image;
    document.getElementById(#{idFigcaptionVideoCallerPhoto}).textContent = message.data.senderName;
    document.getElementById(#{idDialogIncomingVideoCall}).show();

  } else if (message.data.messageType === #{show PushMsgTypeAudioCall}) {
    
    document.getElementById(#{idImgAudioCallerPhoto}).src = message.data.image;
    document.getElementById(#{idFigcaptionAudioCallerPhoto}).textContent = message.data.senderName;
    document.getElementById(#{idDialogIncomingAudioCall}).show();

  }

});
