
let ws = new WebSocket(
  '@{toParent $ WebSoketR channelId polite}'.replace("http:", "ws:").replace("https:", "wss:")
);


let pc = new RTCPeerConnection(#{config});

pc.ontrack = ({track, streams}) => {
  track.onunmute = () => {
    const remoteVideo = document.getElementById(#{idVideoRemote});
    if ( ! remoteVideo.srcObject ) {
      remoteVideo.srcObject = streams[0];
    }
  }
};

let makingOffer = false;

ws.addEventListener('open', (e) => {

  pc.onnegotiationneeded = async () => {
    try {
      makingOffer = true;
      await pc.setLocalDescription();
      ws.send(JSON.stringify({ description: pc.localDescription }));
    } catch (err) {
      console.error(err);
    } finally {
      makingOffer = false;
    }
  };

  pc.onicecandidate = ({ candidate }) => { ws.send(JSON.stringify({ candidate })); };

});

let ignoreOffer = false;

ws.onmessage = async (e) => {

  const { description, candidate } = JSON.parse(e.data);

  try {
    if (description) {
      const offerCollision = description.type === "offer" && (makingOffer || pc.signalingState !== "stable");

      ignoreOffer = ( #{rawJS polite} ) && offerCollision;
      if (ignoreOffer) {
	return;
      }

      await pc.setRemoteDescription(description);
      if (description.type === "offer") {
	await pc.setLocalDescription();
	ws.send(JSON.stringify({ description: pc.localDescription }));
      }

    } else if (candidate) {

      try {
	await pc.addIceCandidate(candidate);
      } catch (err) {
	if ( ! ignoreOffer ) {
	  throw err;
	}
      }
    }
  } catch (err) {
    console.error(err);
  }
};

navigator.mediaDevices.getUserMedia({
  audio: true,
  video: { facingMode: { ideal: document.getElementById(#{idButtonSwitchVideocam}).dataset.facingMode } }
}).then(function (stream) {

  stream.getTracks().forEach((track) => {
    track.enabled = track.kind === 'video' ? #{rawJS video} : (track.kind === 'audio' ? #{rawJS audio} : true);
    pc.addTrack(track, stream);
  });
  document.getElementById(#{idVideoSelf}).srcObject = stream;
  return stream;

}).then((stream) => {

  document.getElementById(#{idButtonSwitchVideocam}).onclick = (e) => {

    e.target.dataset.facingMode = e.target.dataset.facingMode === 'user' ? 'environment' : 'user';

    pc.getSenders().filter(
      (sender) => sender.track.kind === stream.getVideoTracks()[0].kind
    ).forEach((sender) => {
      sender.track.stop();
    });

    navigator.mediaDevices.getUserMedia({
      video: { facingMode: { ideal: e.target.dataset.facingMode } }
    }).then((stream) => {

      const [videoTrack] = stream.getVideoTracks();

      pc.getSenders().filter(
	(sender) => sender.track.kind === videoTrack.kind
      ).forEach((sender) => {
	sender.replaceTrack(videoTrack);
      });

      document.getElementById(#{idVideoSelf}).srcObject = stream;

    });
  };

  document.getElementById(#{idButtonVideoSwitch}).onclick = (e) => {

    pc.getSenders().filter(
      (sender) => sender.track.kind === stream.getVideoTracks()[0].kind
    ).forEach((sender) => {
      sender.track.enabled = !sender.track.enabled;
      e.target.querySelector('md-icon').textContent = sender.track.enabled ? 'videocam_off' : 'videocam';
    });

  };

  document.getElementById(#{idButtonAudioSwitch}).onclick = (e) => {

    pc.getSenders().filter(
      (sender) => sender.track.kind === stream.getAudioTracks()[0].kind
    ).forEach((sender) => {
      sender.track.enabled = !sender.track.enabled;
      e.target.querySelector('md-icon').textContent = sender.track.enabled ? 'mic_off' : 'mic';
    });

  };

  [#{idButtonExitSession}, #{idButtonEndSession}].forEach((x) => {
    document.getElementById(x).addEventListener('click', (e) => {
      stream.getTracks().forEach((track) => { track.stop(); });
    }, { once: true });
  });

  navigator.serviceWorker.addEventListener('message', (message) => {
    if (message.data.messageType === #{show PushMsgTypeEndSession}) {
      stream.getTracks().forEach((track) => { track.stop(); });
    }
  }, { once: true });

}).catch(function (err) {
  console.error(err);
});


navigator.serviceWorker.addEventListener('message', function (message) {

  if (message.data.messageType === #{show PushMsgTypeEndSession}) {
    pc.close();
    ws.close();
    document.getElementById(#{idDialogCallEnded}).show();
  }

});

[#{idButtonExitSession}, #{idButtonEndSession}].forEach((x) => {
  document.getElementById(x).addEventListener('click', (e) => {
    fetch('@{toParent PushMessageR}', {
      method: 'POST',
      headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
	"messageType": #{show PushMsgTypeEndSession},
	"channelId": #{show channel},
	"senderId": #{show $ fromSqlKey sid},
	"recipientId": #{show $ fromSqlKey rid}
      })
    }).then((result) => {
      pc.close();
      ws.close();
      window.location.href = #{backlink};
    });
  });
});

navigator.mediaDevices.enumerateDevices().then((devices) => {
  if (devices.filter((device) => device.kind === 'videoinput').length < 2) {
    document.getElementById(#{idButtonSwitchVideocam}).setAttribute('disabled','');
  } else {
    document.getElementById(#{idButtonSwitchVideocam}).removeAttribute('disabled');
  }
});
